// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: buffer.sql

package queries

import (
	"context"
)

const countAliasBuffer = `-- name: CountAliasBuffer :one
SELECT
    count(*)
FROM
    alias_buffer
`

func (q *Queries) CountAliasBuffer(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAliasBuffer)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLongestAliasBuffer = `-- name: GetLongestAliasBuffer :one
SELECT
    len(alias)
FROM
    alias_buffer
ORDER BY
    len(alias) DESC
LIMIT
    1
`

func (q *Queries) GetLongestAliasBuffer(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getLongestAliasBuffer)
	var len interface{}
	err := row.Scan(&len)
	return len, err
}

const insertAliasBuffer = `-- name: InsertAliasBuffer :one
WITH inserted AS (
    INSERT INTO
        alias_buffer (alias)
    VALUES
        ($1) ON CONFLICT DO NOTHING RETURNING alias
)
SELECT
    count(*)
FROM
    inserted
`

func (q *Queries) InsertAliasBuffer(ctx context.Context, alias string) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertAliasBuffer, alias)
	var count int64
	err := row.Scan(&count)
	return count, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countUrls = `-- name: CountUrls :one
SELECT
    count(*)
FROM
    urls
`

func (q *Queries) CountUrls(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUrls)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUrl = `-- name: CreateUrl :one
WITH alias AS (
    SELECT
        alias
    FROM
        alias_buffer
    LIMIT
        1 FOR
    UPDATE
),
inserted AS (
    INSERT INTO
        urls (id, alias, url, domain)
    VALUES
        (
            $1,
            (
                SELECT
                    alias
                FROM
                    alias
                LIMIT
                    1
            ), $2, $3
        ) RETURNING id, alias, url, domain
), deleted AS (
    DELETE FROM
        alias_buffer
    WHERE
        alias = (
            SELECT
                alias
            FROM
                alias
            LIMIT
                1
        )
)
SELECT
    id, alias, url, domain
FROM
    inserted
`

type CreateUrlParams struct {
	ID     uuid.UUID
	Url    string
	Domain string
}

type CreateUrlRow struct {
	ID     uuid.UUID
	Alias  string
	Url    string
	Domain string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (*CreateUrlRow, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.ID, arg.Url, arg.Domain)
	var i CreateUrlRow
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Domain,
	)
	return &i, err
}

const getUrl = `-- name: GetUrl :one
SELECT
    id, alias, url, domain
FROM
    urls
WHERE
    id = $1
`

func (q *Queries) GetUrl(ctx context.Context, id uuid.UUID) (*Url, error) {
	row := q.db.QueryRowContext(ctx, getUrl, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Domain,
	)
	return &i, err
}

const getUrlByAlias = `-- name: GetUrlByAlias :one
SELECT
    id, alias, url, domain
FROM
    urls
WHERE
    alias = $1
`

func (q *Queries) GetUrlByAlias(ctx context.Context, alias string) (*Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByAlias, alias)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Domain,
	)
	return &i, err
}

const getUrlsByAliases = `-- name: GetUrlsByAliases :many
SELECT
    id,
    alias
FROM
    urls
WHERE
    alias = ANY($1 :: text [])
`

type GetUrlsByAliasesRow struct {
	ID    uuid.UUID
	Alias string
}

func (q *Queries) GetUrlsByAliases(ctx context.Context, aliases []string) ([]*GetUrlsByAliasesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUrlsByAliases, pq.Array(aliases))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUrlsByAliasesRow
	for rows.Next() {
		var i GetUrlsByAliasesRow
		if err := rows.Scan(&i.ID, &i.Alias); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO
    urls (id, alias, url, domain)
VALUES
    ($1, $2, $3, $4) RETURNING id, alias, url, domain
`

type CreateUrlParams struct {
	ID     uuid.UUID
	Alias  string
	Url    string
	Domain string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (*Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl,
		arg.ID,
		arg.Alias,
		arg.Url,
		arg.Domain,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Domain,
	)
	return &i, err
}

const getUrl = `-- name: GetUrl :one
SELECT
    id, alias, url, domain
FROM
    urls
WHERE
    id = $1
`

func (q *Queries) GetUrl(ctx context.Context, id uuid.UUID) (*Url, error) {
	row := q.db.QueryRowContext(ctx, getUrl, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Domain,
	)
	return &i, err
}

const getUrlByAlias = `-- name: GetUrlByAlias :one
SELECT
    id, alias, url, domain
FROM
    urls
WHERE
    alias = $1
`

func (q *Queries) GetUrlByAlias(ctx context.Context, alias string) (*Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByAlias, alias)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Domain,
	)
	return &i, err
}

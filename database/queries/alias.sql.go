// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: alias.sql

package queries

import (
	"context"

	"github.com/lib/pq"
)

const countAliases = `-- name: CountAliases :one
SELECT
    count(*)
FROM
    aliases
`

func (q *Queries) CountAliases(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAliases)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFreeAliases = `-- name: CountFreeAliases :one
SELECT
    count(*)
FROM
    aliases
WHERE
    used = false
`

func (q *Queries) CountFreeAliases(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFreeAliases)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAlias = `-- name: CreateAlias :one
INSERT INTO
    aliases (alias, used)
VALUES
    ($1, false) RETURNING alias, used
`

func (q *Queries) CreateAlias(ctx context.Context, alias string) (*Alias, error) {
	row := q.db.QueryRowContext(ctx, createAlias, alias)
	var i Alias
	err := row.Scan(&i.Alias, &i.Used)
	return &i, err
}

const getAliases = `-- name: GetAliases :many
SELECT
    alias
FROM
    aliases
WHERE
    alias = ANY($1 :: text [])
`

func (q *Queries) GetAliases(ctx context.Context, aliases []string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAliases, pq.Array(aliases))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var alias string
		if err := rows.Scan(&alias); err != nil {
			return nil, err
		}
		items = append(items, alias)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreeAlias = `-- name: GetFreeAlias :one
SELECT
    alias, used
FROM
    aliases
WHERE
    used = false
LIMIT
    1 FOR
UPDATE
`

func (q *Queries) GetFreeAlias(ctx context.Context) (*Alias, error) {
	row := q.db.QueryRowContext(ctx, getFreeAlias)
	var i Alias
	err := row.Scan(&i.Alias, &i.Used)
	return &i, err
}

const markAliasUsed = `-- name: MarkAliasUsed :exec
UPDATE
    aliases
SET
    used = TRUE
WHERE
    alias = $1
`

func (q *Queries) MarkAliasUsed(ctx context.Context, alias string) error {
	_, err := q.db.ExecContext(ctx, markAliasUsed, alias)
	return err
}
